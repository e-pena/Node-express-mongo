- CREAR ESTRUCTURA
	npm install express-generator -g
	express --view=pug red-bicicletas
	html-to-pug.com

- MAPAS
	Leaflet. Openstreetmap.org
var mymap = L.map('main_map').setView([-34.6012424, -58.3861497], 13);

L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
	attribution:
		'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://cloudmade.com">CloudMade</a>',
	maxZoom: 18,
}).addTo(mymap);

L.marker([-34.6012424, -58.3861497]).addTo(mymap);
L.marker([-34.6012124, -58.3951497]).addTo(mymap);
L.marker([-34.6012024, -58.3961497]).addTo(mymap);

- TESTING - JASMINE
	- Jasmine es un framework de desarrollo para testear código JS.
	- Se instala primero de manera global (-g), luego como dependencia de desarrollo (--save-dev). 
	- Luego se inicializa el módulo node node_modules/Jasmine/bin/Jasmine init
	- Finalmente, se agrega en package.json en la sección de scripts: "scripts": {"test": jasmine}. Así, con npm test corren todos los test.
	- Si queremos probar solo una cosa, se puede escribir el path: jasmine spec/nombreTest.spec.js
	- En cada archivo spec se escribe la suite de test, que es el conjunto de tests. Se hace con la sintaxis:
describe("Una suite", function() {
  it("contiene un spec con una expectativa", function() {
    expect(true).toBe(true);
   });
});
La expectativa es la prueba que resulta con éxito, error o falla. El método global es expect(propiedad o valor a testear).toBe(valor esperado).
Dentro del describe se pone el nombre para declarar la suite y luego se pueden poner infinitos it. Los spec son definidos con los it. 
	- Setup: todo lo relacionado a la ejecución previa del spec. Se usa beforeEach (que se ejecuta antes de cada spec) y beforeAll (que se ejecuta una vez antes de que se ejecuten los spec).
	- Tear Down: es para la finalización de specs. Usa los métodos afterEach y afterAll.
	- En jasmine.json conviene poner false en random al comienzo.
	- En el test hay que pasar como parámetro muchas veces un done y ponerlo al final para que el proceso termine (done())
	- Librería REQUEST: es para simular peticiones (get, post, etc)

- BASES DE DATOS
	- Se puede interactuar con lenguaje nativo de la base de datos o usando ODM/ORM (Object Data/Relational Model). Usando esta segunda opción, baja la performance porque hay que transformar en métodos de la base de datos.

- MONGODB
	- El más utilizado de los ODM/ORM es Mongoose.
	- insertOne recibe por parámetro un objeto JSON con el documento a insertar.
	- inserMany recibe por parámetro un array de objetos.
	- find es encontrar. Se puede filtrar como $gt (greater than) o $lt(lower than) u otros métodos. A los valores que busco les pongo un 1.
	- updateOne(), updateMany(), replaceOne()
	- deleteOne(), deleteMany()

- MONGOOSE
INICIAR:var mongoose = require('mongoose');
	var mongoDB = 'mongodb+srv://dbUser:pyR2omJnA5ZyioDB@cluster0.azwaf.mongodb.net/test';
	mongoose.connect(mongoDB, { useNewUrlParser: true, useUnifiedTopology: true });
	mongoose.Promise = global.Promise;
	var db = mongoose.connection;
	db.on('error', console.error.bind(console, 'connection error'));
	db.once('open', function () {});
CLASE SCHEMA: 	var Schema = mongoose.Schema;
		var ciudadanoSchema = new Schema({
		nombre: String,
		edad: Number,
		}); 
		module.exports = mongoose.model('Ciudadano', ciudadanoSchema)
AGREGAR MÉTODOS A SCHEMA: ciudadanoSchema.methods.saludar = function () {
				var saludo = this.nombre ? `Hola, mi nombre es ${this.nombre}` : 'Hola, no tengo nombre';
				console.log(saludo);
			   };
GENERAR MODELO ASOCIADO: var Ciudadano = mongoose.model('Ciudadano', ciudadanoSchema);
CREAR NUEVO DOCUMENTO: var unCiudadano = new Ciudadano({ nombre: 'Pedro', edad: 21 });
PERSISTIR EL MODELO: unCiudadano.save((err, unCiudadano) => {
			if (err) return console.log(err);
			unCiudadano.saludar();
		      });
OBTENER DATOS: Ciudadano.find((err, ciudadanos) => {
		if (err) return console.error(err);
		console.log(ciudadanos);
		});
FILTRAR: Ciudadano.find({ nombre: /^Pedro/ })
CREAR NUEVA INSTANCIA: bicicletaSchema.statics.createInstance = function (code, color, modelo, ubicacion) {
			return new this({
			code: code,
			color: color,
			modelo: modelo,
			ubicacion: ubicacion,
			});
		      };
ESTABLECER REFERENCIAS DENTRO DE MONGO:
	- Dentro del JSON, se pone el dato (por ejemplo, usuario), así: usuario: { type: mongoose.Schema.Types.ObjectId, ref: 'Usuario' }
	- Para indicar la referencia se debe poner .populate y pasarle el nombre con el que se lo va a designar. Por ejemplo:
Reserva.find({}).populate('bicicleta').populate('usuario').exec(function () {
						console.log(reservas[0]);}